{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-dev-hyd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_cust')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tgt_stagging_calfornia_health')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp1_src_org_csv1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_src_org_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "organizations.csv",
						"folderPath": "raw",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Website",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Founded",
						"type": "String"
					},
					{
						"name": "Industry",
						"type": "String"
					},
					{
						"name": "Total_Employees",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_tgt_org_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_tgt_org_csv1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_dev_bs",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Venkat_DS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "staging",
						"container": "venkat-de"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "(Risk-Adjusted Mortality Rate)\"",
						"type": "String"
					},
					{
						"name": "ESOPHAGEAL RESECTION",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					},
					{
						"name": "Prop_9",
						"type": "String"
					},
					{
						"name": "Prop_10",
						"type": "String"
					},
					{
						"name": "Prop_11",
						"type": "String"
					},
					{
						"name": "Prop_12",
						"type": "String"
					},
					{
						"name": "Prop_13",
						"type": "String"
					},
					{
						"name": "Prop_14",
						"type": "String"
					},
					{
						"name": "Prop_15",
						"type": "String"
					},
					{
						"name": "Prop_16",
						"type": "String"
					},
					{
						"name": "Prop_17",
						"type": "String"
					},
					{
						"name": "Prop_18",
						"type": "String"
					},
					{
						"name": "Prop_19",
						"type": "String"
					},
					{
						"name": "Prop_20",
						"type": "String"
					},
					{
						"name": "Prop_21",
						"type": "String"
					},
					{
						"name": "Prop_22",
						"type": "String"
					},
					{
						"name": "Prop_23",
						"type": "String"
					},
					{
						"name": "Prop_24",
						"type": "String"
					},
					{
						"name": "Prop_25",
						"type": "String"
					},
					{
						"name": "Prop_26",
						"type": "String"
					},
					{
						"name": "Prop_27",
						"type": "String"
					},
					{
						"name": "Prop_28",
						"type": "String"
					},
					{
						"name": "Prop_29",
						"type": "String"
					},
					{
						"name": "Prop_30",
						"type": "String"
					},
					{
						"name": "Prop_31",
						"type": "String"
					},
					{
						"name": "Prop_32",
						"type": "String"
					},
					{
						"name": "Prop_33",
						"type": "String"
					},
					{
						"name": "Prop_34",
						"type": "String"
					},
					{
						"name": "Prop_35",
						"type": "String"
					},
					{
						"name": "Prop_36",
						"type": "String"
					},
					{
						"name": "Prop_37",
						"type": "String"
					},
					{
						"name": "Prop_38",
						"type": "String"
					},
					{
						"name": "Prop_39",
						"type": "String"
					},
					{
						"name": "Prop_40",
						"type": "String"
					},
					{
						"name": "Prop_41",
						"type": "String"
					},
					{
						"name": "Prop_42",
						"type": "String"
					},
					{
						"name": "Prop_43",
						"type": "String"
					},
					{
						"name": "Prop_44",
						"type": "String"
					},
					{
						"name": "Prop_45",
						"type": "String"
					},
					{
						"name": "Prop_46",
						"type": "String"
					},
					{
						"name": "Prop_47",
						"type": "String"
					},
					{
						"name": "Prop_48",
						"type": "String"
					},
					{
						"name": "Prop_49",
						"type": "String"
					},
					{
						"name": "Prop_50",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_bank_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Index",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Index",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Website",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Website",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Founded",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Founded",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Industry",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Industry",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Total_Employees",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total_Employees",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_src_bank_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_tgt_bank_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T06:26:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_pp_cust')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_src_cust",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_tgt_cust",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T05:39:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_tgt_cust')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pp_src_org_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pp_tgt_org_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T05:16:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp_src_org_csv')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipp1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "pp1_src_org_csv1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pp_tgt_org_csv1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T05:16:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp1_src_org_csv1')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ramana')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csv_source_2011",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_tgt_2011",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T05:16:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Org')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Org_src",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tgt_Org",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Tgt_Organization.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_bank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_bank_csv_copy",
								"type": "DatasetReference"
							},
							"name": "Bankcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_bank_csv_copy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Bankcsv",
						"Bankcsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pp_src_org_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pp_tgt_org_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp_src_org_csv')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_Neelima"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_src_bank_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_bank_csv",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_calfornia_health_2010')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_calfornia_health_2010",
								"type": "DatasetReference"
							},
							"name": "Srccalforniahealth2010"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tgt_stagging_calfornia_health",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          COUNTY as string,",
						"          HOSPITAL as string,",
						"          {COMMENT LETTERS} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Deaths)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Cases)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Outlier Ratings)} as string,",
						"          {PANCREATIC RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Deaths)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Cases)} as string,",
						"          {PANCREATIC RESECTION\\n(Outlier Ratings)} as string,",
						"          {AAA REPAIR\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {AAA REPAIR\\n(# of Deaths)} as string,",
						"          {AAA REPAIR\\n(# of Cases)} as string,",
						"          {AAA REPAIR    (Outlier Ratings)} as string,",
						"          {CRANIOTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CRANIOTOMY\\n(# of Deaths)} as string,",
						"          {CRANIOTOMY\\n(# of Cases)} as string,",
						"          {CRANIOTOMY (Outlier Ratings)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Deaths)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Cases)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Outlier Ratings)} as string,",
						"          {HEART FAILURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HEART FAILURE\\n(# of Deaths)} as string,",
						"          {HEART FAILURE\\n(# of Cases)} as string,",
						"          {HEART FAILURE\\n(Outlier Ratings)} as string,",
						"          {ACUTE STROKE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE STROKE\\n(# of Deaths)} as string,",
						"          {ACUTE STROKE\\n(# of Cases)} as string,",
						"          {ACUTE STROKE (Outlier Ratings)} as string,",
						"          {GI HEMORRHAGE (Risk-Adjusted Mortality Rate)} as string,",
						"          {GI HEMORRHAGE\\n(# of Deaths)} as string,",
						"          {GI HEMORRHAGE\\n(# of Cases)} as string,",
						"          {GI HEMORRHAGE (Outlier Ratings)} as string,",
						"          {HIP FRACTURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HIP FRACTURE\\n(# of Deaths)} as string,",
						"          {HIP FRACTURE\\n(# of Cases)} as string,",
						"          {HIP FRACTURE (Outlier Ratings)} as string,",
						"          {PNEUMONIA\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PNEUMONIA\\n(# of Deaths)} as string,",
						"          {PNEUMONIA\\n(# of Cases)} as string,",
						"          {PNEUMONIA (Outlier Ratings)} as string,",
						"          {PCI\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PCI\\n(# of Deaths)} as string,",
						"          {PCI\\n(# of Cases)} as string,",
						"          {PCI\\n(Outlier Ratings)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Deaths)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Cases)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Outlier Ratings)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Srccalforniahealth2010",
						"Srccalforniahealth2010 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['tgt_health_2010.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_tgt_stagging_calfornia_health')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_copy_california_health_2010')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Src_California_health_2010",
								"type": "DatasetReference"
							},
							"name": "Srccaliforniahealth2010"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_tgt_stagging_california_health",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          COUNTY as string,",
						"          HOSPITAL as string,",
						"          {COMMENT LETTERS} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Deaths)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(# of Cases)} as string,",
						"          {ESOPHAGEAL RESECTION\\n(Outlier Ratings)} as string,",
						"          {PANCREATIC RESECTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Deaths)} as string,",
						"          {PANCREATIC RESECTION\\n(# of Cases)} as string,",
						"          {PANCREATIC RESECTION\\n(Outlier Ratings)} as string,",
						"          {AAA REPAIR\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {AAA REPAIR\\n(# of Deaths)} as string,",
						"          {AAA REPAIR\\n(# of Cases)} as string,",
						"          {AAA REPAIR    (Outlier Ratings)} as string,",
						"          {CRANIOTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CRANIOTOMY\\n(# of Deaths)} as string,",
						"          {CRANIOTOMY\\n(# of Cases)} as string,",
						"          {CRANIOTOMY (Outlier Ratings)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Deaths)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(# of Cases)} as string,",
						"          {ACUTE MYOCARDIAL INFARCTION\\n(Outlier Ratings)} as string,",
						"          {HEART FAILURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HEART FAILURE\\n(# of Deaths)} as string,",
						"          {HEART FAILURE\\n(# of Cases)} as string,",
						"          {HEART FAILURE\\n(Outlier Ratings)} as string,",
						"          {ACUTE STROKE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {ACUTE STROKE\\n(# of Deaths)} as string,",
						"          {ACUTE STROKE\\n(# of Cases)} as string,",
						"          {ACUTE STROKE (Outlier Ratings)} as string,",
						"          {GI HEMORRHAGE (Risk-Adjusted Mortality Rate)} as string,",
						"          {GI HEMORRHAGE\\n(# of Deaths)} as string,",
						"          {GI HEMORRHAGE\\n(# of Cases)} as string,",
						"          {GI HEMORRHAGE (Outlier Ratings)} as string,",
						"          {HIP FRACTURE\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {HIP FRACTURE\\n(# of Deaths)} as string,",
						"          {HIP FRACTURE\\n(# of Cases)} as string,",
						"          {HIP FRACTURE (Outlier Ratings)} as string,",
						"          {PNEUMONIA\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PNEUMONIA\\n(# of Deaths)} as string,",
						"          {PNEUMONIA\\n(# of Cases)} as string,",
						"          {PNEUMONIA (Outlier Ratings)} as string,",
						"          {PCI\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {PCI\\n(# of Deaths)} as string,",
						"          {PCI\\n(# of Cases)} as string,",
						"          {PCI\\n(Outlier Ratings)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Risk-Adjusted Mortality Rate)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Deaths)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(# of Cases)} as string,",
						"          {CAROTID ENDARTERECTOMY\\n(Outlier Ratings)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Srccaliforniahealth2010",
						"Srccaliforniahealth2010 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['tgt_health_2010.csv'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_df_org_csv1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "df_venkat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pp1_src_org_csv1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pp_tgt_org_csv1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Ls_dev_bs",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as string,",
						"          Industry as string,",
						"          Total_Employees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {(Risk-Adjusted Mortality Rate)\"} as string,",
						"          {ESOPHAGEAL RESECTION} as string,",
						"          Prop_2 as string,",
						"          Prop_3 as string,",
						"          Prop_4 as string,",
						"          Prop_5 as string,",
						"          Prop_6 as string,",
						"          Prop_7 as string,",
						"          Prop_8 as string,",
						"          Prop_9 as string,",
						"          Prop_10 as string,",
						"          Prop_11 as string,",
						"          Prop_12 as string,",
						"          Prop_13 as string,",
						"          Prop_14 as string,",
						"          Prop_15 as string,",
						"          Prop_16 as string,",
						"          Prop_17 as string,",
						"          Prop_18 as string,",
						"          Prop_19 as string,",
						"          Prop_20 as string,",
						"          Prop_21 as string,",
						"          Prop_22 as string,",
						"          Prop_23 as string,",
						"          Prop_24 as string,",
						"          Prop_25 as string,",
						"          Prop_26 as string,",
						"          Prop_27 as string,",
						"          Prop_28 as string,",
						"          Prop_29 as string,",
						"          Prop_30 as string,",
						"          Prop_31 as string,",
						"          Prop_32 as string,",
						"          Prop_33 as string,",
						"          Prop_34 as string,",
						"          Prop_35 as string,",
						"          Prop_36 as string,",
						"          Prop_37 as string,",
						"          Prop_38 as string,",
						"          Prop_39 as string,",
						"          Prop_40 as string,",
						"          Prop_41 as string,",
						"          Prop_42 as string,",
						"          Prop_43 as string,",
						"          Prop_44 as string,",
						"          Prop_45 as string,",
						"          Prop_46 as string,",
						"          Prop_47 as string,",
						"          Prop_48 as string,",
						"          Prop_49 as string,",
						"          Prop_50 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pp1_src_org_csv1')]",
				"[concat(variables('factoryId'), '/datasets/pp_tgt_org_csv1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_copy_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_copy_california_health_2010",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_copy_california_health_2010",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Srccaliforniahealth2010": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Venkat_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T05:16:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_copy_california_health_2010')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_Org_csv_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Org",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Org",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Neelima_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-14T05:40:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Org')]"
			]
		}
	]
}